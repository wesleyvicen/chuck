---
version: 2

jobs:
  build:
    environment:
      # Configure the JVM and Gradle to avoid OOM errors
      _JAVA_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
    docker:
      - image: circleci/openjdk:11.0.3-jdk-stretch
    steps:
      - checkout
      - restore_cache:
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - run:
          name: Install dependencies
          command: ./gradlew build -x test
      - save_cache:
          paths:
            - ~/.gradle/wrapper
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - save_cache:
          paths:
            - ~/.gradle/caches
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - persist_to_workspace:
          root: .
          paths:
            - build

  release-production:
    docker:
      - image: circleci/openjdk:11.0.3-jdk-stretch
    steps:
      - checkout
      - attach_workspace:
          at: .
      - setup_remote_docker
      - run:
          name: Log into docker registry
          command: |
            docker login --username=_ --password=${HEROKU_REGISTRY_TOKEN} registry.heroku.com
      - run:
          name: Build and push image
          command: |
            ./gradlew clean dockerTagHerokuProduction
            docker push registry.heroku.com/chucky/web
      - run:
          name: Release
          command: |
            export IMAGE_ID=$(docker inspect registry.heroku.com/chucky/web --format={{.Id}})
            curl -X PATCH \
              https://api.heroku.com/apps/chucky/formation \
              -H 'Accept: application/vnd.heroku+json; version=3.docker-releases' \
              -H "Authorization: Bearer ${HEROKU_REGISTRY_TOKEN}" \
              -H 'Content-Type: application/json' \
              -d "{\"updates\":[{\"type\":\"web\",\"docker_image\":\"${IMAGE_ID}\"}]}"
      - run:
          name: Remove docker credentials
          command: |
            rm "${HOME}/.docker/config.json"

  release-staging:
    docker:
      - image: circleci/openjdk:11.0.3-jdk-stretch
    steps:
      - checkout
      - attach_workspace:
          at: .
      - setup_remote_docker
      - run:
          name: Log into docker registry
          command: |
            docker login --username=_ --password=${HEROKU_REGISTRY_TOKEN} registry.heroku.com
      - run:
          name: Build and push image
          command: |
            ./gradlew clean dockerTagHerokuStaging
            docker push registry.heroku.com/chucky-staging/web
      - run:
          name: Release
          command: |
            export IMAGE_ID=$(docker inspect registry.heroku.com/chucky-staging/web --format={{.Id}})
            curl -X PATCH \
              https://api.heroku.com/apps/chucky-staging/formation \
              -H 'Accept: application/vnd.heroku+json; version=3.docker-releases' \
              -H "Authorization: Bearer ${HEROKU_REGISTRY_TOKEN}" \
              -H 'Content-Type: application/json' \
              -d "{\"updates\":[{\"type\":\"web\",\"docker_image\":\"${IMAGE_ID}\"}]}"
      - run:
          name: Remove docker credentials
          command: |
            rm "${HOME}/.docker/config.json"

  test-unit:
    docker:
      - image: circleci/openjdk:11.0.3-jdk-stretch
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run unit test
          command: ./gradlew test

workflows:
  version: 2

  test_and_release_staging:
    jobs:
      - build:
          filters:
            branches:
              ignore: master
      - test-unit:
          requires:
            - build
          filters:
            branches:
              ignore: master
      - release-staging:
          requires:
            - test-unit
          filters:
            branches:
              ignore: master

  test_and_release_production:
    jobs:
      - build:
          filters:
            branches:
              only: master
      - test-unit:
          requires:
            - build
          filters:
            branches:
              only: master
      - release-staging:
          requires:
            - test-unit
          filters:
            branches:
              only: master
      - release-production:
          requires:
            - release-staging
          filters:
            branches:
              only: master